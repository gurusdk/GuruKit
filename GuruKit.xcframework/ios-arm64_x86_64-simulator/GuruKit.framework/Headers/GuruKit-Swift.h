#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef GURUKIT_SWIFT_H
#define GURUKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import Foundation;
@import GuruShared;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GuruKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class GuruSharedAuthProviderType;
@class GuruSharedAuthToken;
@class GuruSharedKotlinThrowable;

SWIFT_CLASS("_TtC7GuruKit17AppleAuthProvider")
@interface AppleAuthProvider : NSObject <GuruSharedDarwinAuthProvider>
@property (nonatomic, readonly, strong) GuruSharedAuthProviderType * _Nonnull type;
- (void)loginOnSuccess:(void (^ _Nonnull)(GuruSharedAuthToken * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)logoutOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASAuthorizationController;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface AppleAuthProvider (SWIFT_EXTENSION(GuruKit)) <ASAuthorizationControllerPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForAuthorizationController:(ASAuthorizationController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end

@class ASAuthorization;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface AppleAuthProvider (SWIFT_EXTENSION(GuruKit)) <ASAuthorizationControllerDelegate>
- (void)authorizationController:(ASAuthorizationController * _Nonnull)controller didCompleteWithAuthorization:(ASAuthorization * _Nonnull)authorization;
- (void)authorizationController:(ASAuthorizationController * _Nonnull)controller didCompleteWithError:(NSError * _Nonnull)error;
@end

@protocol GuruSharedIBillingProviderHandler;
@class GuruSharedBillingProviderType;
@class NSString;
@class GuruSharedSkuOrderParams;
@class GuruSharedSkuQueryParams;
@class GuruSharedSkuDetails;
@class SKProductsRequest;
@class SKProductsResponse;
@class SKRequest;
@class SKPaymentQueue;
@class SKPaymentTransaction;

SWIFT_CLASS("_TtC7GuruKit20AppleBillingProvider")
@interface AppleBillingProvider : NSObject <GuruSharedDarwinBillingProvider, SKPaymentTransactionObserver, SKProductsRequestDelegate>
@property (nonatomic, strong) id <GuruSharedIBillingProviderHandler> _Nonnull handler;
@property (nonatomic, strong) GuruSharedBillingProviderType * _Nonnull type;
- (void)consumePurchaseId:(NSString * _Nonnull)id onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)dispose;
- (void)purchaseSkuOrderParams:(GuruSharedSkuOrderParams * _Nonnull)params developerPayload:(NSString * _Nonnull)developerPayload onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)queryAndHandleUnconsumedPurchasesOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)querySkuDetailsParams:(NSArray<GuruSharedSkuQueryParams *> * _Nonnull)params onSuccess:(void (^ _Nonnull)(NSArray<GuruSharedSkuDetails *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)productsRequest:(SKProductsRequest * _Nonnull)request didReceiveResponse:(SKProductsResponse * _Nonnull)response;
- (void)request:(SKRequest * _Nonnull)request didFailWithError:(NSError * _Nonnull)error;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class NSURL;
@class GuruSharedLoginResp;
@protocol IUserCenterListener;

/// GuruSdk is the public interface class for Objective-C/Swift, providing functionalities such as initialization, login, payment, and event reporting.
/// note:
///
/// <ol>
///   <li>
///     Before using other functions, you must call <code>GuruSdk.applicationDidFinishLaunching</code> (or <code>applicationOpenURL</code>) to ensure internal initialization is complete.
///   </li>
///   <li>
///     If URL callbacks need to be handled (such as for third-party logins or deep linking), please call <code>GuruSdk.applicationOpenURL</code> in the app’s <code>openURL</code> callback.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC7GuruKit7GuruSdk")
@interface GuruSdk : NSObject
/// Call this method during app launch to initialize the SDK.
/// note:
///
/// <ul>
///   <li>
///     If the SDK has not yet been initialized, <code>ensureInitialized()</code> will be automatically called internally.
///   </li>
///   <li>
///     It is recommended to call this method in <code>AppDelegate.application(_:didFinishLaunchingWithOptions:)</code>.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     func application(_ application: UIApplication,
///                      didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///         GuruSdk.applicationDidFinishLaunching(application, launchOptions: launchOptions)
///         return true
///     }
///
///     \endcode</li>
/// </ul>
/// \param application The application object passed in from <code>UIApplicationDelegate</code>.
///
/// \param launchOptions Launch options (such as push info or deep links).
///
///
/// returns:
/// Always returns <code>true</code>, indicating successful initialization.
+ (BOOL)applicationDidFinishLaunching:(UIApplication * _Nonnull)application launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// Handles the case when the app is opened via an external URL, used for deep linking or third-party login callbacks.
/// note:
///
/// <ul>
///   <li>
///     If the SDK has not yet been initialized, <code>ensureInitialized()</code> will be automatically called internally.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any]) -> Bool {
///         return GuruSdk.applicationOpenURL(
///             app,
///             open: url,
///             sourceApplication: options[.sourceApplication] as? String,
///             annotation: options[.annotation]
///         )
///     }
///
///     \endcode</li>
/// </ul>
/// \param application The application object passed in from <code>UIApplicationDelegate</code>.
///
/// \param url The URL that was used to open the app.
///
/// \param sourceApplication The Bundle ID of the source application.
///
/// \param annotation Additional annotation information.
///
///
/// returns:
/// Always returns <code>true</code>, indicating that the URL has been handled.
+ (BOOL)applicationOpenURL:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nullable)annotation SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the advertising identifier (IDFA), which may vary based on privacy policies.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let adId = GuruSdk.getAdvertisingId()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the advertising identifier. If permissions are not granted, it may be empty or return a default value.
+ (NSString * _Nonnull)getAdvertisingId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the unique device identifier. Usually generated or read automatically by the KMP layer.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let deviceId = GuruSdk.getDeviceId()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the device ID.
+ (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the current version of the app (e.g., <code>1.0.0</code>).
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let appVersion = GuruSdk.getAppVersion()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the app version.
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
/// Logs in using the specified third-party authentication method.
/// note:
///
/// <ul>
///   <li>
///     After a successful login, <code>queryAndHandleUnconsumedPurchases()</code> will be automatically called.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.login(.google, onSuccess: { provider, resp in
///         // Handle successful login
///         let openid = resp.openid // Unique user id
///         let token = resp.token // User login token
///     }, onError: { error in
///         // Handle error
///     })
///
///     \endcode</li>
/// </ul>
/// \param type The authentication type (e.g., Apple login, Google, Facebook, etc.).
///
/// \param onSuccess A callback that is invoked upon a successful login, returning the login type and the login response data.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
+ (void)login:(GuruSharedAuthProviderType * _Nonnull)type onSuccess:(void (^ _Nonnull)(GuruSharedAuthProviderType * _Nonnull, GuruSharedLoginResp * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
/// Logs out the currently authenticated user.
/// note:
///
/// <ul>
///   <li>
///     After logout, the user must log in again to perform operations that require authentication.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.logout()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)logout;
/// For debugging or diagnostics, returns the current SDK configuration information.
/// <ul>
///   <li>
///     Example:
///     \code
///     let configStr = GuruSdk.dumpConfig()
///     print(configStr)
///
///     \endcode</li>
/// </ul>
///
/// returns:
/// A string representation of the configuration.
+ (NSString * _Nonnull)dumpConfig SWIFT_WARN_UNUSED_RESULT;
/// Queries product information (such as subscriptions or in-app products).
/// note:
///
/// <ul>
///   <li>
///     Please ensure the user is logged in first, to properly associate purchase information.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     let params1 = SkuQueryParams.Builder().setProductId(productId: "com.simple.test1").setProductType(productType: ProductType.inapp).build()
///     let params2 = SkuQueryParams.Builder().setProductId(productId: "com.simple.test2").setProductType(productType: ProductType.inapp).build()    
///     GuruSdk.querySkuDetails([param1, param2], onSuccess: { details in
///         // Handle product information
///     }, onError: { error in
///         // Handle error
///     })
///
///     \endcode</li>
/// </ul>
/// \param params A list of product query parameters.
///
/// \param onSuccess A callback that is invoked upon a successful query, returning a list of product details.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
+ (void)querySkuDetails:(NSArray<GuruSharedSkuQueryParams *> * _Nonnull)params onSuccess:(void (^ _Nonnull)(NSArray<GuruSharedSkuDetails *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
/// Purchases the specified product or subscription.
/// note:
///
/// <ul>
///   <li>
///     Ensure that in the iOS environment, in-app purchases are properly configured and a valid product ID is provided.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     let params = SkuQueryParams.Builder().setProductId(productId: "com.simple.test1").setProductType(productType: ProductType.inapp).build()
///     GuruSdk.querySkuDetails([params]) { skuDetails in
///       if !skuDetails.isEmpty {
///              let sku = skuDetails[0]
///              let orderid = Int(Date().timeIntervalSince1970)//Customize unique order id
///              let builder = SkuOrderParams.Builder()
///              builder.setOrderId(orderId: String(orderid))
///                  .setProductId(productId: sku.productId)
///                  .setProductType(productType: sku.productType)
///                  .setAmount(amount: sku.amount)
///                  .setCallbackUrl(callbackUrl: "callback_url")
///                  .setCurrency(currency: sku.currency)
///              GuruSdk.purchase(builder.build()) { receipt in
///                  // Handle successful purchase
///              } onError: { error in
///                  // Handle error
///              } onUserCancelled: {
///                  // Handle user cancellation
///              }
///         }
///     } onError: { error in
///         // Handle error
///      }
///
///     \endcode</li>
/// </ul>
/// \param orderParams The order parameters.
///
/// \param onSuccess A callback that is invoked upon a successful purchase, returning the server order ID or transaction identifier.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
/// \param onUserCancelled A callback that is invoked when the user cancels the purchase.
///
+ (void)purchase:(GuruSharedSkuOrderParams * _Nonnull)orderParams onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError onUserCancelled:(void (^ _Nonnull)(void))onUserCancelled;
/// Queries and handles unconsumed purchases (such as unfinished transactions or subscriptions).
/// note:
///
/// <ul>
///   <li>
///     It is recommended to call this immediately after a successful login to restore purchases that have been made but not yet acknowledged.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.queryAndHandleUnconsumedPurchases()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)queryAndHandleUnconsumedPurchases;
/// Reports a custom event with an optional event value and additional parameters.
/// note:
///
/// <ul>
///   <li>
///     Specific event types and their purposes can be analyzed in the backend using the collected event data.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.logEvent(name: "ViewPage", value: "Home", params: ["section": "banner"])
///
///     \endcode</li>
/// </ul>
/// \param name The event name.
///
/// \param value The event value, which can be nil.
///
/// \param params Additional parameters as key-value pairs.
///
+ (void)logEventWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value params:(NSDictionary<NSString *, NSString *> * _Nullable)params;
/// Reports a custom event that only includes the event name.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.logEvent(name: "ButtonClicked")</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param name The event name.
///
+ (void)logEventWithName:(NSString * _Nonnull)name;
/// Call this method when the app enters the foreground to notify the SDK to perform necessary actions.
/// <ul>
///   <li>
///     Example:
///     \code
///     func sceneDidBecomeActive(_ scene: UIScene) {
///         GuruSdk.onAppForegrounded()
///     }
///
///     \endcode</li>
/// </ul>
+ (void)onAppForegrounded;
/// Call this method when the app enters the background to notify the SDK to perform necessary actions.
/// <ul>
///   <li>
///     Example:
///     \code
///     func sceneWillResignActive(_ scene: UIScene) {
///         GuruSdk.onAppBackgrounded()
///     }
///
///     \endcode</li>
/// </ul>
+ (void)onAppBackgrounded;
/// Displays the login page example for the user center.
/// note:
///
/// <ul>
///   <li>
///     The view must be presented on the main thread.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.loginByUserCenter(myListener)
///
///     \endcode</li>
/// </ul>
/// \param listener A callback listener for the user center login process.
///
+ (void)loginByUserCenter:(id <IUserCenterListener> _Nonnull)listener;
/// Collapses or closes the user center; in this example, it closes the current user center page.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.collapseUserCenter()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)collapseUserCenter;
/// Expands or opens the user center; in this example, a different page is displayed depending on whether the user is logged in.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.expandUserCenter()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)expandUserCenter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoginResult;

SWIFT_PROTOCOL("_TtP7GuruKit19IUserCenterListener_")
@protocol IUserCenterListener
/// 登录成功回调
/// \param result 登录结果
///
- (void)onLoginSuccessWithResult:(LoginResult * _Nonnull)result;
/// 登录失败回调
/// \param error 错误信息
///
- (void)onLoginFailedWithError:(NSError * _Nonnull)error;
/// 登出回调
- (void)onLogout;
@end


SWIFT_CLASS("_TtC7GuruKit11LoginResult")
@interface LoginResult : NSObject
/// 登录类型，例如 facebook、google 或 guest
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// 用户的 OpenID
@property (nonatomic, readonly, copy) NSString * _Nonnull openid;
/// 登录令牌
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// 初始化方法
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type openid:(NSString * _Nonnull)openid token:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef GURUKIT_SWIFT_H
#define GURUKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import Foundation;
@import GuruShared;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GuruKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class GuruSharedAuthProviderType;
@class GuruSharedAuthToken;
@class GuruSharedKotlinThrowable;

SWIFT_CLASS("_TtC7GuruKit17AppleAuthProvider")
@interface AppleAuthProvider : NSObject <GuruSharedDarwinAuthProvider>
@property (nonatomic, readonly, strong) GuruSharedAuthProviderType * _Nonnull type;
- (void)loginOnSuccess:(void (^ _Nonnull)(GuruSharedAuthToken * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)logoutOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASAuthorizationController;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface AppleAuthProvider (SWIFT_EXTENSION(GuruKit)) <ASAuthorizationControllerPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForAuthorizationController:(ASAuthorizationController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end

@class ASAuthorization;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface AppleAuthProvider (SWIFT_EXTENSION(GuruKit)) <ASAuthorizationControllerDelegate>
- (void)authorizationController:(ASAuthorizationController * _Nonnull)controller didCompleteWithAuthorization:(ASAuthorization * _Nonnull)authorization;
- (void)authorizationController:(ASAuthorizationController * _Nonnull)controller didCompleteWithError:(NSError * _Nonnull)error;
@end

@protocol GuruSharedIBillingProviderHandler;
@class GuruSharedBillingProviderType;
@class NSString;
@class GuruSharedSkuOrderParams;
@class GuruSharedSkuQueryParams;
@class GuruSharedSkuDetails;
@class SKProductsRequest;
@class SKProductsResponse;
@class SKRequest;
@class SKPaymentQueue;
@class SKPaymentTransaction;

SWIFT_CLASS("_TtC7GuruKit20AppleBillingProvider")
@interface AppleBillingProvider : NSObject <GuruSharedDarwinBillingProvider, SKPaymentTransactionObserver, SKProductsRequestDelegate>
@property (nonatomic, strong) id <GuruSharedIBillingProviderHandler> _Nonnull handler;
@property (nonatomic, strong) GuruSharedBillingProviderType * _Nonnull type;
- (void)consumePurchaseId:(NSString * _Nonnull)id onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)dispose;
- (void)purchaseSkuOrderParams:(GuruSharedSkuOrderParams * _Nonnull)params developerPayload:(NSString * _Nonnull)developerPayload onSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)queryAndHandleUnconsumedPurchasesOnSuccess:(void (^ _Nonnull)(void))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)querySkuDetailsParams:(NSArray<GuruSharedSkuQueryParams *> * _Nonnull)params onSuccess:(void (^ _Nonnull)(NSArray<GuruSharedSkuDetails *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
- (void)productsRequest:(SKProductsRequest * _Nonnull)request didReceiveResponse:(SKProductsResponse * _Nonnull)response;
- (void)request:(SKRequest * _Nonnull)request didFailWithError:(NSError * _Nonnull)error;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class NSURL;
@class GuruSharedLoginResp;
@protocol IUserCenterListener;

/// GuruSdk is the public interface class for Objective-C/Swift, providing functionalities such as initialization, login, payment, and event reporting.
/// note:
///
/// <ol>
///   <li>
///     Before using other functions, you must call <code>GuruSdk.applicationDidFinishLaunching</code> (or <code>applicationOpenURL</code>) to ensure internal initialization is complete.
///   </li>
///   <li>
///     If URL callbacks need to be handled (such as for third-party logins or deep linking), please call <code>GuruSdk.applicationOpenURL</code> in the app’s <code>openURL</code> callback.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC7GuruKit7GuruSdk")
@interface GuruSdk : NSObject
/// Call this method during app launch to initialize the SDK.
/// note:
///
/// <ul>
///   <li>
///     If the SDK has not yet been initialized, <code>ensureInitialized()</code> will be automatically called internally.
///   </li>
///   <li>
///     It is recommended to call this method in <code>AppDelegate.application(_:didFinishLaunchingWithOptions:)</code>.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     func application(_ application: UIApplication,
///                      didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///         GuruSdk.applicationDidFinishLaunching(application, launchOptions: launchOptions)
///         return true
///     }
///
///     \endcode</li>
/// </ul>
/// \param application The application object passed in from <code>UIApplicationDelegate</code>.
///
/// \param launchOptions Launch options (such as push info or deep links).
///
///
/// returns:
/// Always returns <code>true</code>, indicating successful initialization.
+ (BOOL)applicationDidFinishLaunching:(UIApplication * _Nonnull)application launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// Handles the case when the app is opened via an external URL, used for deep linking or third-party login callbacks.
/// note:
///
/// <ul>
///   <li>
///     If the SDK has not yet been initialized, <code>ensureInitialized()</code> will be automatically called internally.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any]) -> Bool {
///         return GuruSdk.applicationOpenURL(
///             app,
///             open: url,
///             sourceApplication: options[.sourceApplication] as? String,
///             annotation: options[.annotation]
///         )
///     }
///
///     \endcode</li>
/// </ul>
/// \param application The application object passed in from <code>UIApplicationDelegate</code>.
///
/// \param url The URL that was used to open the app.
///
/// \param sourceApplication The Bundle ID of the source application.
///
/// \param annotation Additional annotation information.
///
///
/// returns:
/// Always returns <code>true</code>, indicating that the URL has been handled.
+ (BOOL)applicationOpenURL:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nullable)annotation SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the advertising identifier (IDFA), which may vary based on privacy policies.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let adId = GuruSdk.getAdvertisingId()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the advertising identifier. If permissions are not granted, it may be empty or return a default value.
+ (NSString * _Nonnull)getAdvertisingId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the unique device identifier. Usually generated or read automatically by the KMP layer.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let deviceId = GuruSdk.getDeviceId()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the device ID.
+ (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the current version of the app (e.g., <code>1.0.0</code>).
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>let appVersion = GuruSdk.getAppVersion()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// A string representing the app version.
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
/// Logs in using the specified third-party authentication method.
/// note:
///
/// <ul>
///   <li>
///     After a successful login, <code>queryAndHandleUnconsumedPurchases()</code> will be automatically called.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.login(.google, onSuccess: { provider, resp in
///         // Handle successful login
///         let openid = resp.openid // Unique user id
///         let token = resp.token // User login token
///     }, onError: { error in
///         // Handle error
///     })
///
///     \endcode</li>
/// </ul>
/// \param type The authentication type (e.g., Apple login, Google, Facebook, etc.).
///
/// \param onSuccess A callback that is invoked upon a successful login, returning the login type and the login response data.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
+ (void)login:(GuruSharedAuthProviderType * _Nonnull)type onSuccess:(void (^ _Nonnull)(GuruSharedAuthProviderType * _Nonnull, GuruSharedLoginResp * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
/// Logs out the currently authenticated user.
/// note:
///
/// <ul>
///   <li>
///     After logout, the user must log in again to perform operations that require authentication.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.logout()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)logout;
/// For debugging or diagnostics, returns the current SDK configuration information.
/// <ul>
///   <li>
///     Example:
///     \code
///     let configStr = GuruSdk.dumpConfig()
///     print(configStr)
///
///     \endcode</li>
/// </ul>
///
/// returns:
/// A string representation of the configuration.
+ (NSString * _Nonnull)dumpConfig SWIFT_WARN_UNUSED_RESULT;
/// Queries product information (such as subscriptions or in-app products).
/// note:
///
/// <ul>
///   <li>
///     Please ensure the user is logged in first, to properly associate purchase information.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     let params1 = SkuQueryParams.Builder().setProductId(productId: "com.simple.test1").setProductType(productType: ProductType.inapp).build()
///     let params2 = SkuQueryParams.Builder().setProductId(productId: "com.simple.test2").setProductType(productType: ProductType.inapp).build()    
///     GuruSdk.querySkuDetails([param1, param2], onSuccess: { details in
///         // Handle product information
///     }, onError: { error in
///         // Handle error
///     })
///
///     \endcode</li>
/// </ul>
/// \param params A list of product query parameters.
///
/// \param onSuccess A callback that is invoked upon a successful query, returning a list of product details.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
+ (void)querySkuDetails:(NSArray<GuruSharedSkuQueryParams *> * _Nonnull)params onSuccess:(void (^ _Nonnull)(NSArray<GuruSharedSkuDetails *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError;
/// Purchases the specified product or subscription.
/// note:
///
/// <ul>
///   <li>
///     Ensure that in the iOS environment, in-app purchases are properly configured and a valid product ID is provided.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     let params = SkuQueryParams.Builder().setProductId(productId: "com.simple.test1").setProductType(productType: ProductType.inapp).build()
///     GuruSdk.querySkuDetails([params]) { skuDetails in
///       if !skuDetails.isEmpty {
///              let sku = skuDetails[0]
///              let orderid = Int(Date().timeIntervalSince1970)//Customize unique order id
///              let builder = SkuOrderParams.Builder()
///              builder.setOrderId(orderId: String(orderid))
///                  .setProductId(productId: sku.productId)
///                  .setProductType(productType: sku.productType)
///                  .setAmount(amount: sku.amount)
///                  .setCallbackUrl(callbackUrl: "callback_url")
///                  .setCurrency(currency: sku.currency)
///              GuruSdk.purchase(builder.build()) { receipt in
///                  // Handle successful purchase
///              } onError: { error in
///                  // Handle error
///              } onUserCancelled: {
///                  // Handle user cancellation
///              }
///         }
///     } onError: { error in
///         // Handle error
///      }
///
///     \endcode</li>
/// </ul>
/// \param orderParams The order parameters.
///
/// \param onSuccess A callback that is invoked upon a successful purchase, returning the server order ID or transaction identifier.
///
/// \param onError A callback that is invoked when an error occurs, returning the error information.
///
/// \param onUserCancelled A callback that is invoked when the user cancels the purchase.
///
+ (void)purchase:(GuruSharedSkuOrderParams * _Nonnull)orderParams onSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(GuruSharedKotlinThrowable * _Nonnull))onError onUserCancelled:(void (^ _Nonnull)(void))onUserCancelled;
/// Queries and handles unconsumed purchases (such as unfinished transactions or subscriptions).
/// note:
///
/// <ul>
///   <li>
///     It is recommended to call this immediately after a successful login to restore purchases that have been made but not yet acknowledged.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.queryAndHandleUnconsumedPurchases()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)queryAndHandleUnconsumedPurchases;
/// Reports a custom event with an optional event value and additional parameters.
/// note:
///
/// <ul>
///   <li>
///     Specific event types and their purposes can be analyzed in the backend using the collected event data.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.logEvent(name: "ViewPage", value: "Home", params: ["section": "banner"])
///
///     \endcode</li>
/// </ul>
/// \param name The event name.
///
/// \param value The event value, which can be nil.
///
/// \param params Additional parameters as key-value pairs.
///
+ (void)logEventWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value params:(NSDictionary<NSString *, NSString *> * _Nullable)params;
/// Reports a custom event that only includes the event name.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.logEvent(name: "ButtonClicked")</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param name The event name.
///
+ (void)logEventWithName:(NSString * _Nonnull)name;
/// Call this method when the app enters the foreground to notify the SDK to perform necessary actions.
/// <ul>
///   <li>
///     Example:
///     \code
///     func sceneDidBecomeActive(_ scene: UIScene) {
///         GuruSdk.onAppForegrounded()
///     }
///
///     \endcode</li>
/// </ul>
+ (void)onAppForegrounded;
/// Call this method when the app enters the background to notify the SDK to perform necessary actions.
/// <ul>
///   <li>
///     Example:
///     \code
///     func sceneWillResignActive(_ scene: UIScene) {
///         GuruSdk.onAppBackgrounded()
///     }
///
///     \endcode</li>
/// </ul>
+ (void)onAppBackgrounded;
/// Displays the login page example for the user center.
/// note:
///
/// <ul>
///   <li>
///     The view must be presented on the main thread.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Example:
///     \code
///     GuruSdk.loginByUserCenter(myListener)
///
///     \endcode</li>
/// </ul>
/// \param listener A callback listener for the user center login process.
///
+ (void)loginByUserCenter:(id <IUserCenterListener> _Nonnull)listener;
/// Collapses or closes the user center; in this example, it closes the current user center page.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.collapseUserCenter()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)collapseUserCenter;
/// Expands or opens the user center; in this example, a different page is displayed depending on whether the user is logged in.
/// <ul>
///   <li>
///     Example:
///     <ul>
///       <li>
///         <code>GuruSdk.expandUserCenter()</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)expandUserCenter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoginResult;

SWIFT_PROTOCOL("_TtP7GuruKit19IUserCenterListener_")
@protocol IUserCenterListener
/// 登录成功回调
/// \param result 登录结果
///
- (void)onLoginSuccessWithResult:(LoginResult * _Nonnull)result;
/// 登录失败回调
/// \param error 错误信息
///
- (void)onLoginFailedWithError:(NSError * _Nonnull)error;
/// 登出回调
- (void)onLogout;
@end


SWIFT_CLASS("_TtC7GuruKit11LoginResult")
@interface LoginResult : NSObject
/// 登录类型，例如 facebook、google 或 guest
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// 用户的 OpenID
@property (nonatomic, readonly, copy) NSString * _Nonnull openid;
/// 登录令牌
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// 初始化方法
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type openid:(NSString * _Nonnull)openid token:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
